var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React from "react";
import { Animated, StyleSheet, Text, TouchableOpacity, View, } from "react-native";
import { defaultThumbButton, DefaultThumbChildrenProps, defaultTrackBar, ToggleStyles, ToggleThumbButtonStyles, ToogleTrackBarStyles, } from "./constants";
import { useTitleTextColor, useToggleValue } from "./hooks";
var ThumbChildren = function (props) {
    var _a = __assign(__assign({}, DefaultThumbChildrenProps), props), toggleValue = _a.toggleValue, activeColor = _a.activeColor, inActiveColor = _a.inActiveColor, title = _a.title, placement = _a.placement, children = _a.children, disabled = _a.disabled, disabledTitleStyle = _a.disabledTitleStyle;
    if (children) {
        return <View>{children}</View>;
    }
    var titleTextColor = useTitleTextColor(toggleValue, activeColor, inActiveColor, title, placement);
    if (titleTextColor) {
        var textColor = titleTextColor.textColor;
        var textStyle = StyleSheet.flatten([
            {
                color: textColor,
            },
            disabled && disabledTitleStyle,
        ]);
        return <Text style={textStyle}>{title}</Text>;
    }
    return null;
};
var ReactNativeToggleElement = function (props) {
    var _a = __assign(__assign({}, DefaultThumbChildrenProps), props), onPress = _a.onPress, value = _a.value, disabled = _a.disabled, leftComponent = _a.leftComponent, rightComponent = _a.rightComponent, thumbActiveComponent = _a.thumbActiveComponent, thumbInActiveComponent = _a.thumbInActiveComponent, customTrackBar = _a.trackBar, customThumbButton = _a.thumbButton, containerStyle = _a.containerStyle, trackBarStyle = _a.trackBarStyle, disabledStyle = _a.disabledStyle, disabledTitleStyle = _a.disabledTitleStyle, thumbStyle = _a.thumbStyle, _b = _a.leftTitle, leftTitle = _b === void 0 ? "" : _b, _c = _a.rightTitle, rightTitle = _c === void 0 ? "" : _c, _d = _a.animationDuration, animationDuration = _d === void 0 ? 250 : _d;
    var finalTrackBar = __assign(__assign({}, defaultTrackBar), customTrackBar);
    var finalThumbButton = __assign(__assign({}, defaultThumbButton), customThumbButton);
    var _e = useToggleValue(value, finalThumbButton, finalTrackBar, animationDuration, onPress), toggleValue = _e.toggleValue, handlePress = _e.handlePress, handleLongPress = _e.handleLongPress, fadeAnim = _e.fadeAnim;
    var trackBarBackgroundColor = function () {
        var activeBackgroundColor = finalTrackBar.activeBackgroundColor, inActiveBackgroundColor = finalTrackBar.inActiveBackgroundColor, borderInActiveColor = finalTrackBar.borderInActiveColor, borderActiveColor = finalTrackBar.borderActiveColor;
        var style = {
            backgroundColor: toggleValue
                ? activeBackgroundColor
                : inActiveBackgroundColor,
            borderColor: toggleValue ? borderActiveColor : borderInActiveColor,
        };
        return style;
    };
    var activeBackgroundColor = finalThumbButton.activeBackgroundColor, inActiveBackgroundColor = finalThumbButton.inActiveBackgroundColor;
    return (<View style={StyleSheet.flatten([ToggleStyles.container, containerStyle])}>
      <TouchableOpacity activeOpacity={1} testID="ToggleButton" onPress={function () { return handlePress(); }} onLongPress={function () { return handleLongPress(); }} disabled={disabled}>
        <View testID="TrackBar" style={StyleSheet.flatten([
            ToogleTrackBarStyles.trackBar(finalTrackBar),
            trackBarBackgroundColor(),
            trackBarStyle,
            disabled && disabledStyle,
        ])}>
          <View testID="ThumbButtonLeft" style={StyleSheet.flatten([
            ToggleStyles.thumbPosition,
            ToggleStyles.thumbLeft,
            ToggleThumbButtonStyles.thumbButton(finalThumbButton, finalTrackBar.borderWidth),
        ])}>
            <ThumbChildren toggleValue={toggleValue} activeColor={activeBackgroundColor} inActiveColor={inActiveBackgroundColor} disabled={disabled} disabledTitleStyle={disabledTitleStyle} title={leftTitle} placement="left">
              {leftComponent}
            </ThumbChildren>
          </View>
          <Animated.View testID="ThumbButton" style={StyleSheet.flatten([
            {
                transform: [{ translateX: fadeAnim }],
                zIndex: -1,
                backgroundColor: toggleValue
                    ? activeBackgroundColor
                    : inActiveBackgroundColor,
            },
            ToggleStyles.thumbAnimatedPosition,
            ToggleThumbButtonStyles.thumbButton(finalThumbButton, finalTrackBar.borderWidth),
            thumbStyle,
        ])}>
            {toggleValue ? thumbActiveComponent : thumbInActiveComponent}
          </Animated.View>
          <View testID="ThumbButtonRight" style={StyleSheet.flatten([
            ToggleStyles.thumbPosition,
            ToggleStyles.thumbRight,
            ToggleThumbButtonStyles.thumbButton(finalThumbButton, finalTrackBar.borderWidth),
        ])}>
            <ThumbChildren toggleValue={toggleValue} activeColor={finalThumbButton.activeColor} inActiveColor={finalThumbButton.inActiveColor} disabled={disabled} disabledTitleStyle={disabledTitleStyle} title={rightTitle} placement="right">
              {rightComponent}
            </ThumbChildren>
          </View>
        </View>
      </TouchableOpacity>
    </View>);
};
export default ReactNativeToggleElement;
//# sourceMappingURL=toggle.js.map